import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

ext {
    pathToTempFolder = System.getProperty("java.io.tmpdir")

    iliModelBasisdefinitionen = "OeREBKRM_V2_0"
    iliModelVorschriften = "OeREBKRMvs_V2_0"
    iliModelKonfiguration = "OeREBKRMkvs_V2_0"
    iliModelTransferstruktur = "OeREBKRMtrsfr_V2_0"

    federalLegalBasisBaseUrl = "https://raw.githubusercontent.com/oereb/oereb2-data/master/"
    federalLegalBaseDataSet = "OeREBKRM_V2_0_Gesetze"

    federalThemesBaseUrl = "https://raw.githubusercontent.com/oereb/oereb2-data/master/"
    federalThemesDataSet = "OeREBKRM_V2_0_Themen"

    federalTextBaseUrl = "https://raw.githubusercontent.com/oereb/oereb2-data/master/"
    federalTextDataSet = "OeREBKRM_V2_0_Texte"

    cantonalResponsibleOfficesBaseUrl = "https://raw.githubusercontent.com/oereb/oereb2-data/master/"
    cantonalResponsibleOfficesDataSet = "ch.so.agi.zustaendigestellen.oereb2"

    cantonalLegalBasisBaseUrl = "https://raw.githubusercontent.com/oereb/oereb2-data/master/"
    cantonalLegalBaseDataSet = "ch.so.sk.gesetze.oereb2"

    cantonalThemesBaseUrl = "https://raw.githubusercontent.com/oereb/oereb2-data/master/"
    cantonalThemesDataSet = "ch.so.agi.themen.oereb2"

    // TODO: Kantonale Texte?

    iliModelLandUsePlans = "SO_Nutzungsplanung_20171118"
    dbSchemaLandUsePlans = "arp_npl"
    //landUsePlansDataSets = ["2401", "2403", "2405", "2407", "2408", "2456", "2457", "2473", "2474", "2475", "2476", "2479",  "2491", "2498", "2501", "2502", "2514", "2551", "2573", "2580", "2613", "2614", "2615", "2616"]
    landUsePlansDataSets = ["2457","2502"]
    landUsePlansBaseUrl = "https://geo.so.ch/geodata/ch.so.arp.nutzungsplanung/"
    
    iliModelGroundwaterProtection = "PlanerischerGewaesserschutz_LV95_V1_1"
    dbSchemaGroundwaterProtection = "afu_gewaesserschutz"
    groundwaterProtectionDataFile = "afu_gewaesserschutz.xtf"
    groundwaterProtectionBaseUrl = "https://raw.githubusercontent.com/sogis/oereb-gretljobs/master/development_dbs/"

    iliModelStaticForestPerimeters = "SO_AWJF_Statische_Waldgrenzen_20191119"
    dbSchemaStaticForestPerimeters = "awjf_statische_waldgrenze"
    staticForestPerimetersDataFile = "awjf_statische_waldgrenze.xtf"
    staticForestPerimetersBaseUrl = "https://raw.githubusercontent.com/sogis/oereb-gretljobs/master/development_dbs/"

}    

// Cannot use GRETL for ili2pgImportSchema since not all v4 options
// are exposed. 
task createSchemaLandUsePlans(type: SqlExecutor){
    database = [dbUriEdit, "admin", "admin"]
    sqlFiles = ['arp_npl.sql', 'arp_npl_grants.sql']
}

landUsePlansDataSets.each { landUsePlansDataSet ->
    def dataSet = landUsePlansDataSet.toString()
    task "downloadDataLandUsePlans_$dataSet"(type: Download) {
        src landUsePlansBaseUrl + dataSet + ".xtf"
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }

    task "replaceDataLandUsePlans_$dataSet"(type: Ili2pgReplace, dependsOn: "downloadDataLandUsePlans_$dataSet") {
        database = [dbUriEdit, dbUserEdit, dbPwdEdit]
        models = iliModelLandUsePlans
        dbschema = dbSchemaLandUsePlans
        dataFile = file(Paths.get(pathToTempFolder.toString(), dataSet + ".xtf"))
        dataset = dataSet
        disableValidation = true
    }
}

task replaceDataLandUsePlans() {
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('replaceDataLandUsePlans_') }
    }
}

task createSchemaGroundwaterProtection(type: SqlExecutor){
    database = [dbUriEdit, "admin", "admin"]
    sqlFiles = ['afu_gewaesserschutz.sql', 'afu_gewaesserschutz_grants.sql']
}

task downloadDataGroundwaterProtection(type: Download) {
    src groundwaterProtectionBaseUrl + groundwaterProtectionDataFile
    dest pathToTempFolder
    overwrite true
    doLast {
        println "File downloaded to: " + pathToTempFolder
    }        
}

task replaceDataGroundwaterProtection(type: Ili2pgImport, dependsOn: "downloadDataGroundwaterProtection") {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelGroundwaterProtection
    dbschema = dbSchemaGroundwaterProtection
    dataFile = file(Paths.get(pathToTempFolder.toString(), groundwaterProtectionDataFile))
    deleteData = true
    disableValidation = true
}


task createSchemaStaticForestPerimeters(type: SqlExecutor){
    database = [dbUriEdit, "admin", "admin"]
    sqlFiles = ['awjf_statische_waldgrenze.sql', 'awjf_statische_waldgrenze_grants.sql']
}

task downloadDataStaticForestPerimeters(type: Download) {
    src staticForestPerimetersBaseUrl + staticForestPerimetersDataFile
    dest pathToTempFolder
    overwrite true
    doLast {
        println "File downloaded to: " + pathToTempFolder
    }
}

task replaceDataStaticForestPerimeters(type: Ili2pgImport, dependsOn: "downloadDataStaticForestPerimeters") {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelStaticForestPerimeters
    dbschema = dbSchemaStaticForestPerimeters
    dataFile = file(Paths.get(pathToTempFolder.toString(), staticForestPerimetersDataFile))
    deleteData = true
    disableValidation = true
}

task downloadFederalLegalBasis(type: Download) {
    description = "Download Bundesgesetze ($federalLegalBaseDataSet)."
    src federalLegalBasisBaseUrl + federalLegalBaseDataSet + ".xml"
    dest pathToTempFolder
    overwrite true      
}

task importFederalLegalBasisToOereb(type: Ili2pgReplace, dependsOn: 'downloadFederalLegalBasis') {
    description = "Import Bundesgesetze ($federalLegalBaseDataSet) in das stage Schema."
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelVorschriften
    dbschema = "stage"
    dataFile = file(Paths.get(pathToTempFolder.toString(), federalLegalBaseDataSet + ".xml"))
    dataset = "ch.admin.bk.gesetze" 
    disableValidation = true
}

task downloadFederalThemes(type: Download) {
    description = "Download Bundesthemen ($federalThemesDataSet)."
    src federalThemesBaseUrl + federalThemesDataSet + ".xml"
    dest pathToTempFolder
    overwrite true      
}

task importFederalThemesToOereb(type: Ili2pgReplace, dependsOn: 'downloadFederalThemes') {
    description = "Import Bundesthemen ($federalThemesDataSet) in das stage Schema."
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelKonfiguration
    dbschema = "stage"
    dataFile = file(Paths.get(pathToTempFolder.toString(), federalThemesDataSet + ".xml"))
    dataset = "ch.admin.v_d.themen" 
    disableValidation = true
}

task downloadFederalText(type: Download) {
    description = "Download Bundestexte ($federalTextDataSet)."
    src federalTextBaseUrl + federalTextDataSet + ".xml"
    dest pathToTempFolder
    overwrite true      
}

task importFederalTextToOereb(type: Ili2pgReplace, dependsOn: 'downloadFederalText') {
    description = "Import Bundestexte ($federalTextDataSet) in das stage Schema."
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelKonfiguration
    dbschema = "stage"
    dataFile = file(Paths.get(pathToTempFolder.toString(), federalTextDataSet + ".xml"))
    dataset = "ch.admin.v_d.texte" 
    disableValidation = true
}

task downloadCantonalResponsibleOffices(type: Download) {
    description = "Download kantonale zuständige Stellen ($cantonalResponsibleOfficesDataSet)."
    src cantonalResponsibleOfficesBaseUrl + cantonalResponsibleOfficesDataSet + ".xtf"
    dest pathToTempFolder
    overwrite true    
}

task importCantonalResponsibleOfficesToOereb(type: Ili2pgReplace, dependsOn: 'downloadCantonalResponsibleOffices') {
    description = "Import zuständige Stellen ($cantonalResponsibleOfficesDataSet) in das stage Schema."
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelBasisdefinitionen
    dbschema = "stage"
    dataFile = file(Paths.get(pathToTempFolder.toString(), cantonalResponsibleOfficesDataSet + ".xtf"))
    dataset = "ch.so.agi.zustaendigestellen.oereb" 
    disableValidation = true
}

task downloadCantonalLegalBasis(type: Download) {
    description = "Download kantonale Gesetze ($cantonalLegalBaseDataSet)."
    src cantonalLegalBasisBaseUrl + cantonalLegalBaseDataSet + ".xtf"
    dest pathToTempFolder
    overwrite true    
}

task importCantonalLegalBasisToOereb(type: Ili2pgReplace, dependsOn: 'downloadCantonalLegalBasis') {
    description = "Import kantonale Gesetze ($cantonalLegalBaseDataSet) in das stage Schema."
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelVorschriften
    dbschema = "stage"
    dataFile = file(Paths.get(pathToTempFolder.toString(), cantonalLegalBaseDataSet + ".xtf"))
    dataset = "ch.so.sk.gesetze.oereb" 
    disableValidation = true
}

task downloadCantonalThemes(type: Download) {
    description = "Download kantonale Gesetze ($cantonalThemesDataSet)."
    src cantonalThemesBaseUrl + cantonalThemesDataSet + ".xtf"
    dest pathToTempFolder
    overwrite true    
}

task importCantonalThemesToOereb(type: Ili2pgReplace, dependsOn: 'downloadCantonalThemes') {
    description = "Import kantonale Themen ($cantonalThemesDataSet) in das stage Schema."
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelKonfiguration
    dbschema = "stage"
    dataFile = file(Paths.get(pathToTempFolder.toString(), cantonalThemesDataSet + ".xtf"))
    dataset = "ch.so.agi.themen.oereb" 
    disableValidation = true
}
