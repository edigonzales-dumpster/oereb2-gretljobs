apply plugin: "de.undercouch.download"
apply plugin: "ch.so.agi.gretl"

import ch.so.agi.gretl.api.TransferSet
import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

ext {
    pathToTempFolder = System.getProperty("java.io.tmpdir")

    iliModelBasisdefinitionen = "OeREBKRM_V2_0"
    iliModelVorschriften = "OeREBKRMvs_V2_0"
    iliModelKonfiguration = "OeREBKRMkvs_V2_0"
    iliModelTransferstruktur = "OeREBKRMtrsfr_V2_0"

    symbolsWmsBaseUrl = "https://" + geoservicesHostName
    xtfFileName = "ch.so.arp.nutzungsplanung.oereb.xtf"

    dbSchemaLandUsePlansOereb = "arp_npl_oereb"
    landUsePlansDataSet = "ch.so.arp.nutzungsplanung"

    federalLegalBasisBaseUrl = "https://raw.githubusercontent.com/oereb/oereb2-data/master/"
    federalLegalBaseDataSet = "OeREBKRM_V2_0_Gesetze"

    federalThemesBaseUrl = "https://raw.githubusercontent.com/oereb/oereb2-data/master/"
    federalThemesDataSet = "OeREBKRM_V2_0_Themen"

    cantonalResponsibleOfficesBaseUrl = "https://raw.githubusercontent.com/oereb/oereb2-data/master/"
    cantonalResponsibleOfficesDataSet = "ch.so.agi.zustaendigestellen.oereb2"

    cantonalLegalBasisBaseUrl = "https://raw.githubusercontent.com/oereb/oereb2-data/master/"
    cantonalLegalBaseDataSet = "ch.so.sk.gesetze.oereb2"

    cantonalThemesBaseUrl = "https://raw.githubusercontent.com/oereb/oereb2-data/master/"
    cantonalThemesDataSet = "ch.so.agi.themen.oereb2"
}

/*
    // Hier müssen korrekterweise die Einzellayer der WMS-Layergroup stehen.
    wmsLayerList = [
        ["ch.SO.Laermemfindlichkeitsstufen", "urn:fdc:ilismeta.interlis.ch:2017:NP_Typ_Kanton_Erschliessung_Flaechenobjekt"],
        ["ch.SO.NutzungsplanungGrundnutzung", "urn:fdc:ilismeta.interlis.ch:2017:NP_Typ_Kanton_Grundnutzung"],
        ["ch.SO.NutzungsplanungUeberlagernd.Flaeche", "urn:fdc:ilismeta.interlis.ch:2017:NP_Typ_Kanton_Ueberlagernd_Flaeche"],
        ["ch.SO.NutzungsplanungUeberlagernd.Linie", "urn:fdc:ilismeta.interlis.ch:2017:NP_Typ_Kanton_Ueberlagernd_Linie"], 
        ["ch.SO.NutzungsplanungUeberlagernd.Punkt", "urn:fdc:ilismeta.interlis.ch:2017:NP_Typ_Kanton_Ueberlagernd_Punkt"],
        ["ch.SO.Baulinien", "urn:fdc:ilismeta.interlis.ch:2017:NP_Typ_Kanton_Erschliessung_Linienobjekt"],
        ["ch.SO.NutzungsplanungSondernutzungsplaene", "urn:fdc:ilismeta.interlis.ch:2017:NP_Typ_Kanton_Ueberlagernd_Flaeche"],
        ["ch.SO.Waldabstandslinien", "urn:fdc:ilismeta.interlis.ch:2017:NP_Typ_Kanton_Erschliessung_Linienobjekt"]
    ]    
}
*/

// Löscht im Prinzip die Daten des Dataset 'ch.so.arp.nutzungsplanung'.
// TODO: Soll dazu nicht auch der ili2pgDelete-Befehl verwendet werden?
task deleteFromOereb(type: SqlExecutor) {
    description = "Löscht die umgebauten Daten aus dem Transferschema."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ["delete_oereb_landuseplans_tables.sql"]
}

// In V1.1 haben wir die zuständigen Stellen als Dataset des Endproduktes 'missbraucht'. 
// Weil die zuständigen Stellen in der Transferstruktur mitgeschickt werden mussten, wurde beim Import
// der zuständigen Stellen (aus der vorhandenen XTF-Datei) der gewünschte Datasetname (ch.so.arp.nutzungsplanung)
// vergeben und anschliessend beim Datenumbau wurde immer dieser Datasetname verwendet. Dies ist jetzt 
// nicht mehr möglich/notwendig, weil die Assoziation zur zuständigen Stelle EXTERNAL ist und somit
// die zuständigen Stellen nicht mehr mitgeschickt werden müssen. Aus diesem
// Grund muss der Basket und das Dataset für das Endprodukt (die NPL-Daten in der Transferstruktur) 
// manuell erstellt werden.
// TODO: Ist es sinnvoller man würde für dieses Dataset eine leere Datei verwenden?
task createLandUsePlansBasket(type: SqlExecutor, dependsOn: 'deleteFromOereb') {
    description = "Erstellt Basket und Dataset fuer die zu exportierende Transferstruktur."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ["create_landuseplans_basket.sql"]
} 

// Löschen der Bundesdatensätze. Siehe weitere Kommentare bei den kantonalen
// Datensätzen. 

task deleteFederalThemesFromOereb(type: Ili2pgDelete, dependsOn: 'createLandUsePlansBasket') {
    description = "Löscht die Bundesthemen (Dataset: $federalThemesDataSet)."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelKonfiguration
    modeldir = "http://models.geo.admin.ch;https://raw.githubusercontent.com/oereb/oereb2-ilirepo/master/"
    dbschema = dbSchemaLandUsePlansOereb
    dataset = "ch.admin.v_d.oerebkrmkvs_thema" 
}

task deleteFederalLegalBasisFromOereb(type: Ili2pgDelete, dependsOn: 'deleteFederalThemesFromOereb') {
    description = "Löscht die Bundesgesetze (Dataset: $federalLegalBaseDataSet)."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelVorschriften
    modeldir = "http://models.geo.admin.ch;https://raw.githubusercontent.com/oereb/oereb2-ilirepo/master/"
    dbschema = dbSchemaLandUsePlansOereb
    dataset = "ch.admin.bk.gesetze" 
}

// Import der Bundesdatensätze, die für den Umbau benötig werden und in umgekehrter
// Reihenfolge vorhin gelöscht wurden. Siehe weitere Kommentare bei den kantonalen
// Datensätzen.

task downloadFederalLegalBasis(type: Download, dependsOn: 'deleteFederalLegalBasisFromOereb') {
    description = "Download Bundesgesetze ($federalLegalBaseDataSet)."
    src federalLegalBasisBaseUrl + federalLegalBaseDataSet + ".xml"
    dest pathToTempFolder
    overwrite true      
}

task importFederalLegalBasisToOereb(type: Ili2pgReplace, dependsOn: 'downloadFederalLegalBasis') {
    description = "Import Bundesgesetze ($federalLegalBaseDataSet)."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelVorschriften
    modeldir = "http://models.geo.admin.ch;https://raw.githubusercontent.com/oereb/oereb2-ilirepo/master/"
    dbschema = dbSchemaLandUsePlansOereb
    dataFile = file(Paths.get(pathToTempFolder.toString(), federalLegalBaseDataSet + ".xml"))
    dataset = "ch.admin.bk.gesetze" 
    disableValidation = true
}

task downloadFederalThemes(type: Download, dependsOn: 'importFederalLegalBasisToOereb') {
    description = "Download Bundesthemen ($federalThemesDataSet)."
    src federalThemesBaseUrl + federalThemesDataSet + ".xml"
    dest pathToTempFolder
    overwrite true    
}

task importFederalThemesToOereb(type: Ili2pgReplace, dependsOn: 'downloadFederalThemes') {
    description = "Import Bundesthemen ($federalThemesDataSet)."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelKonfiguration
    modeldir = "http://models.geo.admin.ch;https://raw.githubusercontent.com/oereb/oereb2-ilirepo/master/"
    dbschema = dbSchemaLandUsePlansOereb
    dataFile = file(Paths.get(pathToTempFolder.toString(), federalThemesDataSet + ".xml"))
    dataset = "ch.admin.v_d.oerebkrmkvs_thema" 
    disableValidation = true
}

// Die kantonalen Datensätze auf die wir beim Umbau referenzieren, müssen zuerst in der richtigen
// Reihenfolge gelöscht werden. Ansonsten funktioniert ili2pg-replace nicht, da FK constraints
// verletzt werden.

task deleteCantonalThemesFromOereb(type: Ili2pgDelete, dependsOn: 'importFederalThemesToOereb') {
    description = "Löscht die kantonalen Themen (Dataset: $cantonalThemesDataSet)."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelKonfiguration
    modeldir = "http://models.geo.admin.ch;https://raw.githubusercontent.com/oereb/oereb2-ilirepo/master/"
    dbschema = dbSchemaLandUsePlansOereb
    dataset = "ch.so.agi.themen.oereb" 
}

task deleteCantonalLegalBasisFromOereb(type: Ili2pgDelete, dependsOn: 'deleteCantonalThemesFromOereb') {
    description = "Löscht die kantonalen Gesetze (Dataset: $cantonalLegalBaseDataSet)."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelVorschriften
    modeldir = "http://models.geo.admin.ch;https://raw.githubusercontent.com/oereb/oereb2-ilirepo/master/"
    dbschema = dbSchemaLandUsePlansOereb
    dataset = "ch.so.sk.gesetze.oereb" 
}

task deleteCantonalResponsibleOfficesFromOereb(type: Ili2pgDelete, dependsOn: 'deleteCantonalLegalBasisFromOereb') {
    description = "Löscht die kantonalen zuständigen Stellen (Dataset: $cantonalResponsibleOfficesDataSet)."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelBasisdefinitionen
    modeldir = "http://models.geo.admin.ch;https://raw.githubusercontent.com/oereb/oereb2-ilirepo/master/"
    dbschema = dbSchemaLandUsePlansOereb
    dataset = "ch.so.agi.zustaendigestellen.oereb" 
}

// Import der vorhin gelöschten Datensätze. Man könnte sich auch überlegen, ob man diese Datensätze 
// (dazu gehören auch die Bundesgesetze) nicht bereits als gegeben annehmen will. D.h. Bestandteil
// des Schemas und nicht des Datenumbaus. Das hatte ich ganz zu Beginn
// so gehabt, musste (? warum ?) es aber ändern. Einen Vorteil hat es aber, wenn man es hier 
// macht: Es gehört eigentlich alles zum Datenumbau. Und somit ist der Datenumbau für alles verantwortlich
// und kann besser und einfacher auf Änderungen reagieren. Wobei wenn jetzt alles sauber getrennt ist,
// (EXTERNAL) dürfte es ausser bei der Entwicklung keine Änderungen geben. Die Referenzen müssen
// einfach stabil bleiben.

task downloadCantonalResponsibleOffices(type: Download, dependsOn: 'deleteCantonalResponsibleOfficesFromOereb') {
    description = "Download kantonale zuständige Stellen ($cantonalResponsibleOfficesDataSet)."
    src cantonalResponsibleOfficesBaseUrl + cantonalResponsibleOfficesDataSet + ".xtf"
    dest pathToTempFolder
    overwrite true    
}

task importCantonalResponsibleOfficesToOereb(type: Ili2pgReplace, dependsOn: 'downloadCantonalResponsibleOffices') {
    description = "Import zuständige Stellen ($cantonalResponsibleOfficesDataSet)."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelBasisdefinitionen
    modeldir = "http://models.geo.admin.ch;https://raw.githubusercontent.com/oereb/oereb2-ilirepo/master/"
    dbschema = dbSchemaLandUsePlansOereb
    dataFile = file(Paths.get(pathToTempFolder.toString(), cantonalResponsibleOfficesDataSet + ".xtf"))
    dataset = "ch.so.agi.zustaendigestellen.oereb" 
    disableValidation = true
}

task downloadCantonalLegalBasis(type: Download, dependsOn: 'importCantonalResponsibleOfficesToOereb') {
    description = "Download kantonale Gesetze ($cantonalLegalBaseDataSet)."
    src cantonalLegalBasisBaseUrl + cantonalLegalBaseDataSet + ".xtf"
    dest pathToTempFolder
    overwrite true    
}

task importCantonalLegalBasisToOereb(type: Ili2pgReplace, dependsOn: 'downloadCantonalLegalBasis') {
    description = "Import kantonale Gesetze ($cantonalLegalBaseDataSet)."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelVorschriften
    modeldir = "http://models.geo.admin.ch;https://raw.githubusercontent.com/oereb/oereb2-ilirepo/master/"
    dbschema = dbSchemaLandUsePlansOereb
    dataFile = file(Paths.get(pathToTempFolder.toString(), cantonalLegalBaseDataSet + ".xtf"))
    dataset = "ch.so.sk.gesetze.oereb" 
    disableValidation = true
}

task downloadCantonalThemes(type: Download, dependsOn: 'importCantonalLegalBasisToOereb') {
    description = "Download kantonale Gesetze ($cantonalThemesDataSet)."
    src cantonalThemesBaseUrl + cantonalThemesDataSet + ".xtf"
    dest pathToTempFolder
    overwrite true    
}

task importCantonalThemesToOereb(type: Ili2pgReplace, dependsOn: 'downloadCantonalThemes') {
    description = "Import kantonale Themen ($cantonalThemesDataSet)."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelKonfiguration
    modeldir = "http://models.geo.admin.ch;https://raw.githubusercontent.com/oereb/oereb2-ilirepo/master/"
    dbschema = dbSchemaLandUsePlansOereb
    dataFile = file(Paths.get(pathToTempFolder.toString(), cantonalThemesDataSet + ".xtf"))
    dataset = "ch.so.agi.themen.oereb" 
    disableValidation = true
}

// Datenumbau
task transferData(type: SqlExecutor, dependsOn: ["importFederalLegalBasisToOereb", "importCantonalResponsibleOfficesToOereb", "importCantonalLegalBasisToOereb", "importCantonalThemesToOereb"]) {
    description = "Führt den Datenumbau in das Transferschema durch."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    sqlFiles = ["insert_oereb_landuseplans_tables.sql"]
}


// wmsLayerList.each { wmsLayer ->
//     def wmsLayerName = wmsLayer.getAt(0)
//     def typeCodeList = wmsLayer.getAt(1)
//     task "updateSymbols_$wmsLayerName"(type: OerebIconizerQgis3) {
//         description = "Erzeugt die Symbole für die einzelnen Legendeneinträge für $wmsLayerName."
//         sldUrl = "$symbolsWmsBaseUrl/wms/oereb-symbols?&SERVICE=WMS&REQUEST=GetStyles&LAYERS=$wmsLayerName&SLD_VERSION=1.1.0"
//         legendGraphicUrl = "$symbolsWmsBaseUrl/wms/oereb-symbols?SERVICE=WMS&REQUEST=GetLegendGraphic&LAYER=$wmsLayerName&FORMAT=image/png&RULELABEL=false&LAYERTITLE=false&HEIGHT=35&WIDTH=70&SYMBOLHEIGHT=3&SYMBOLWIDTH=6&DPI=300"
//         database = [dbUriEdit, dbUserEdit, dbPwdEdit]
//         dbQTable = "arp_npl_oereb.transferstruktur_legendeeintrag"
//         typeCodeAttrName = "artcode"
//         typeCodeListAttrName = "artcodeliste"
//         typeCodeListValue = typeCodeList
//         symbolAttrName = "symbol"
//         useCommunalTypeCodes = true
//     }
// }

// task updateSymbols(dependsOn: "transferData") {
//     description = "Aggregationstask für das Updaten der Symbole."
//     dependsOn {
//         tasks.findAll { task -> task.name.startsWith('updateSymbols_') }
//     }
// }

//task exportData(type: Ili2pgExport, dependsOn: "updateSymbols") {
task exportData(type: Ili2pgExport, dependsOn: "transferData") {
    description = "Exportiert die umgebauten Daten aus dem Transferschema in ein INTERLIS-Datei."
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelTransferstruktur
    modeldir = "http://models.geo.admin.ch;https://raw.githubusercontent.com/oereb/oereb2-ilirepo/master/"
    dbschema = dbSchemaLandUsePlansOereb
    dataFile = "$rootDir/" + xtfFileName
    dataset = landUsePlansDataSet
    disableValidation = true
}

task replaceWmsServer(dependsOn: "exportData") {
    description = "Ersetzt verschiedene Elemente (Host, Pfad, etc.) der WMS-Requests (GetMap und GetLegendGraphic)."
    doLast {
        ant.replace(
        file: "$rootDir/" + xtfFileName,
        token: '${wmsHost}',
        value: 'https://' + geoservicesHostName,
        encoding: 'UTF-8')
    }
}

//java -jar /Users/stefan/apps/ilivalidator-1.11.6/ilivalidator-1.11.6.jar --modeldir "http://models.geo.admin.ch;https://raw.githubusercontent.com/oereb/oereb2-ilirepo/master/" --allObjectsAccessible ch.so.agi.zustaendigestellen.oereb2.xtf ch.so.arp.nutzungsplanung.oereb.xtf
task validateData(type: IliValidator, dependsOn: "replaceWmsServer") {
    description = "Validiert die exportierten Daten in der Transferstruktur inkl. der externen Beziehungen."
    dataFiles = [
        file(Paths.get(pathToTempFolder.toString(), cantonalResponsibleOfficesDataSet + ".xtf")), 
        file(Paths.get("$rootDir/" + xtfFileName))
        ]
    modeldir = "http://models.geo.admin.ch;https://raw.githubusercontent.com/oereb/oereb2-ilirepo/master/"
    logFile = "ilivalidator.log"
    allObjectsAccessible = true
    //configFile = "validateData.toml"
}

// task importDataToStage(type: Ili2pgReplace, dependsOn: "validateData") {
// //task importDataToStage(type: Ili2pgReplace, dependsOn: "replaceWmsServer") {
//     description = "Import des NPL-ÖREB-Datensatz in das Stage-Schema."
//     database = [dbUriOereb, dbUserOereb, dbPwdOereb]
//     models = iliModelTransferstruktur
//     dbschema = "stage"
//     dataFile = file(Paths.get("$rootDir/" + xtfFileName))
//     dataset = landUsePlansDataSet
//     disableValidation = true 
// }

// task refreshOerebWMSTablesStage(type: SqlExecutor) {
//     description = "Aktualisiert OEREB WMS Tabellen."
//     database = [dbUriOereb, dbUserOereb, dbPwdOereb]
//     sqlFiles = ["update_oerebwms_landuseplans_tables.sql"]
//     sqlParameters = [dbSchema: 'stage']
// }

// task importDataToLive(type: Ili2pgReplace) {
//     description = "Import des NPL-ÖREB-Datensatz in das Live-Schema."
//     database = [dbUriOereb, dbUserOereb, dbPwdOereb]
//     models = iliModelTransferstruktur
//     dbschema = "live"
//     dataFile = file(Paths.get("$rootDir/" + xtfFileName))
//     dataset = landUsePlansDataSet
//     disableValidation = true 
// }

// task refreshOerebWMSTablesLive(type: SqlExecutor) {
//     description = "Aktualisiert OEREB WMS Tabellen."
//     database = [dbUriOereb, dbUserOereb, dbPwdOereb]
//     sqlFiles = ["update_oerebwms_landuseplans_tables.sql"]
//     sqlParameters = [dbSchema: 'live']
// }
